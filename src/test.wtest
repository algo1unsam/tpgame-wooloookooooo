import bloques.*
import crearCosas.*
import balas.*
import tanques.*
import wollok.game.*
import movimientos.*
import tanques.*

describe "bloques" {
	
	const ladrillo = new Ladrillo()
	const acero = new Acero()
	const agua = new Agua()
	const arbusto = new Arbusto()
	const tanqueEnemigo = new TankEnemigo()
	const bala = new Bala(esEnemiga = false, quienDisparo = tank, sentido = up, position = game.at(10,10))
	const balaEnemiga = new Bala(esEnemiga = true, quienDisparo = tanqueEnemigo, sentido = up, position = game.at(9,10))
	
	method initialize() {
		creadorDeCosas.crear(ladrillo,1,0)
		creadorDeCosas.crear(acero,1,1)
		creadorDeCosas.crear(agua,1,2)
		creadorDeCosas.crear(arbusto,1,3)
		
		game.addVisual(tank)
		tank.disparo()
		bala.disparar()
	
	}
	
	
	
	test "TANQUE inicia en el origen" {
		assert.equals(game.at(0,0), tank.position()) //Confirma que tank inicio en esa posiciÃ³n para los siguientes test	
	}
	
//LADRILLO	
	test "LADRILLO se rompe al recibir disparo del jugador" {
		ladrillo.fueImpactado(bala)
		assert.that(ladrillo.fueDestruido())	
	}
	
	test "LADRILLO se rompe al recibir disparo enemigo" {
		ladrillo.fueImpactado(balaEnemiga)
		assert.that(ladrillo.fueDestruido())	
	}

	test "BALA del jugador NO atraviesa el LADRILLO" {
		ladrillo.fueImpactado(bala)
		assert.notThat(ladrillo.dejaPasarBala())
	}
	
	test "BALA enemiga NO atraviesa el LADRILLO" {
		ladrillo.fueImpactado(balaEnemiga) 
		assert.notThat(ladrillo.dejaPasarBala())
	}
		
	
	test "LADRILLO NO deja pasar TANQUE" {
		tank.mover(right)  
		assert.notEquals(game.at(1,0), tank.position())
	}
	
	
	test "TANQUE puede pasar al romperse el LADRILLO" {
		ladrillo.fueImpactado(bala)
		assert.that(ladrillo.seRompe())	
		//Agregar cambio posicion del tanque	
	}
	
//ACERO	
	test "ACERO NO se rompe al recibir disparo del jugador" {
		acero.fueImpactado(bala)
		assert.notThat(acero.fueDestruido())
	}
	
	test "ACERO NO se rompe al recibir disparo enemigo" {
		acero.fueImpactado(balaEnemiga)
		assert.notThat(acero.fueDestruido())
	}
	
	test "BALAS NO atraviesan el ACERO" {
		acero.fueImpactado(bala)
		assert.notThat(acero.dejaPasarBala())
		
		acero.fueImpactado(bala)
		assert.notThat(acero.dejaPasarBala())
	}
	
	
	test "TANQUE NO puede pasar el ACERO aunque reciba disparo" {
		ladrillo.fueImpactado(bala)
		tank.mover(up)
		tank.mover(right)  
		assert.notEquals(game.at(1,1), tank.position())	//Agregar cambio posicion del tanque	
	}
	
	

//AGUA	
	test "AGUA NO se rompe al recibir disparos" {
		agua.fueImpactado(bala)
		assert.notThat(agua.fueDestruido())
		
		agua.fueImpactado(balaEnemiga)
		assert.notThat(agua.fueDestruido()) 
	}

	test "AGUA deja pasar BALA" {
		agua.fueImpactado(bala)
		assert.that(agua.dejaPasarBala())
		
		agua.fueImpactado(balaEnemiga)
		assert.that(agua.dejaPasarBala())
	}
	
	
	test "AGUA NO deja pasar TANQUE" {
		2.times{t => tank.mover(up)}
		tank.mover(right)
		assert.notEquals(game.at(1,2), tank.position())
	}
	

//ARBUSTO	
	test "ARBUSTO NO se rompe al recibir disparos" {
		arbusto.fueImpactado(bala)
		assert.notThat(arbusto.fueDestruido())
		
		arbusto.fueImpactado(balaEnemiga)
		assert.notThat(arbusto.fueDestruido()) 
	}
	
	test "ARBUSTO deja pasar BALA" {
		arbusto.fueImpactado(bala)
		assert.that(arbusto.dejaPasarBala())
		
		arbusto.fueImpactado(balaEnemiga)
		assert.that(arbusto.dejaPasarBala())
	}
	
	
	test "ARBUSTO deja pasar TANQUE" {
		3.times {t => tank.mover(up) } 
		tank.mover(right) 
		assert.equals(game.at(1,3), tank.position())
	}
	
	
//AGUILA
	
//SCORE
	test "SCORE aumenta cuando se matan enemigos" {
		//tank.aumentarKill()
		tanqueEnemigo.fueImpactado(bala) //no funciona porque tanque enemigo no tiene el tick event ya q no fue creado
										//como lo crea el juego.
		assert.equals(100, tank.scoreAsesinados())
	}
}