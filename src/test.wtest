import bloques.*
import crearCosas.*
import balas.*
import tanques.*
import wollok.game.*
import movimientos.*
import tanques.*

describe "bloques" {
	
	const ladrillo = new Ladrillo()
	const acero = new Acero()
	const agua = new Agua()
	const arbusto = new Arbusto()
	const tanqueEnemigo = new TankEnemigo()
	const bala = new Bala(quienDisparo = tank, sentido = up, position = game.at(10,10))
	const balaEnemiga = new Bala(quienDisparo = tanqueEnemigo, sentido = up, position = game.at(9,10))
	
	method initialize() {
		creadorDeCosas.crear(ladrillo,1,4)
		creadorDeCosas.crear(acero,1,1)
		creadorDeCosas.crear(agua,1,2)
		creadorDeCosas.crear(arbusto,1,3)
		
		game.onTick(700, tanqueEnemigo.nombreOnTick()+"mover", { })
		game.onTick(1000, tanqueEnemigo.nombreOnTick()+"disparo", { }) //creo los ontick para q existan en los test y no tire error
		
		game.addVisual(aguila)
		game.addVisual(tank)
		game.addVisual(tanqueEnemigo)
	
		bala.disparar() //solo para que cree los eventos
		balaEnemiga.disparar() //solo para que cree los eventos
	}
	
	
	
	test "TANQUE inicia en el origen" {
		assert.equals(game.at(0,0), tank.position()) //Confirma que tank inicio en esa posiciÃ³n para los siguientes test	
	}
	
	
	

//LADRILLO	
	test "LADRILLO se rompe al recibir disparo" {
		ladrillo.fueImpactado(bala)
		assert.notThat(game.hasVisual(ladrillo))	
	}
	
	test "LADRILLO se rompe al recibir disparo enemigo" {
		ladrillo.fueImpactado(balaEnemiga)
		assert.notThat(game.hasVisual(ladrillo))
	}
	
	test "BALA del jugador NO atraviesa el LADRILLO en primer impacto" {
		ladrillo.fueImpactado(bala)
		assert.notThat(game.hasVisual(bala))
	}
	
	test "BALA enemiga NO atraviesa el LADRILLO en primer impacto" {
		ladrillo.fueImpactado(balaEnemiga) 
		assert.notThat(game.hasVisual(balaEnemiga))
	}
	
	test "LADRILLO NO deja pasar TANQUE" {
		tank.position(game.at(0,4))
		tank.mover(right)  
		assert.equals(game.at(0,4), tank.position())
	}
	
	/*
	test "TANQUE puede pasar al romperse el LADRILLO" {
		ladrillo.fueImpactado(bala)
		assert.notThat(game.hasVisual(ladrillo))
		//game.removeVisual(ladrillo)
		tank.position(game.at(0,4))
		tank.mover(right)
		assert.equals(game.at(1,4), tank.position())	
	}
	* /
	*/

	
//ACERO	
	test "ACERO NO se rompe al recibir disparo del jugador" {
		acero.fueImpactado(bala)
		assert.that(game.hasVisual(acero))
	}
	
	test "ACERO NO se rompe al recibir disparo enemigo" {
		acero.fueImpactado(balaEnemiga)
		assert.that(game.hasVisual(acero))
	}
	
	test "ACERO NO deja pasar BALA" {
		acero.fueImpactado(bala)
		assert.notThat(game.hasVisual(bala))
	}
	
	
	test "TANQUE NO puede pasar el ACERO aunque reciba disparo" {
		ladrillo.fueImpactado(bala)
		tank.mover(up)
		tank.mover(right)  
		assert.equals(game.at(0,1), tank.position())	
	}
	
	

//AGUA	
	test "AGUA NO se rompe al recibir disparos" {
		agua.fueImpactado(bala)
		assert.that(game.hasVisual(agua))
	}
	
	test "AGUA NO se rompe al recibir disparo enemigo" {
		agua.fueImpactado(balaEnemiga)
		assert.that(game.hasVisual(agua))
	}

	test "AGUA deja pasar BALA" {
		agua.fueImpactado(bala)
		assert.that(game.hasVisual(bala))

	}
	
	
	test "AGUA NO deja pasar TANQUE" {
		//2.times{t => tank.mover(up)}
		//tank.mover(right)
		tank.position(game.at(0,2))
		tank.mover(right) 
		assert.equals(game.at(0,2), tank.position())
	}
	

//ARBUSTO	
	test "ARBUSTO NO se rompe al recibir disparos" {
		arbusto.fueImpactado(bala)
		assert.that(game.hasVisual(arbusto))
		
		arbusto.fueImpactado(balaEnemiga)
		assert.that(game.hasVisual(arbusto))
	}
	
	test "ARBUSTO deja pasar BALA" {
		arbusto.fueImpactado(bala)
		assert.that(game.hasVisual(bala))
		
		arbusto.fueImpactado(balaEnemiga)
		assert.that(game.hasVisual(balaEnemiga))
	}
	
	
	test "ARBUSTO deja pasar TANQUE" {
		assert.equals(game.at(0,0), tank.position()) 
		//3.times {t => tank.mover(up) } 
		//tank.mover(right) 
		tank.position(game.at(0,3))
		tank.mover(right) 
		assert.equals(game.at(1,3), tank.position())
	}

//TANQUES
	test "TANQUES ENEMIGOS desaparecen cuando son impactados por BALA" {
		tanqueEnemigo.fueImpactado(bala)
		assert.notThat(game.hasVisual(tanqueEnemigo))
	}	

	
//BALA
	test "BALAS desaparecen cuando impacta con BALA ENEMIGA" {
		bala.fueImpactado(balaEnemiga)
		assert.notThat(game.hasVisual(bala))
		assert.notThat(game.hasVisual(balaEnemiga))
	}	
	
//SCORE
	test "SCORE aumenta cuando se matan enemigos" {
		tanqueEnemigo.fueImpactado(bala)
		assert.equals(100, tank.scoreAsesinados())
	}
	
}